# -*- coding: utf-8 -*-
"""Mumbai_Beds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ODCS5WgOCN1tf9JIeFSjJ4KvO-ZMAdtD
"""

import json
import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
from time import sleep

# %%
# post API url:
post_api_url = 'http://127.0.0.1:5000/updateBulk'

HospitalName=[]
TotalBeds=[]
VacantBeds=[]
contact=[]
last_updated=[]
last=[]
icu_vacant=[]
with_vacant=[]
without_vacant=[]
ventilator_vacant=[]
Sheetname=[]
address=[]

url="https://www.nmmchealthfacilities.com/HospitalInfo/showhospitalist"
r=requests.get(url)
page=r.content
soup=BeautifulSoup(page,'html.parser')
row=soup.find_all("div",{"class":'text-center text-white social mt-3'})
for hos in row:
  hospi=hos.find("b")
  hosp=hospi.text
  if(hosp!="Total Hospital Summary"):
    HospitalName.append(hosp)
#     # print(hosp)

    # detail=hos.find("a")['href'] if hos.find("a") is not None else " "
    detail=hos.find("span")
    if detail is not None:
      call=detail.text.split(":- ")
      # print(call[1])
      contact.append(call[1])
    else:
      # print(" ")
      contact.append("-")
    # print(contact)
    adr=hospi.text.split(",")
    ad=hospi.text.split("-")      
    if(len(ad)==2):
      address.append(ad[1]+", Mumbai, Maharashtra, India")
      Sheetname.append(ad[1])
      # print(ad[1])
    elif(len(adr)==2):
      address.append(adr[1]+", Mumbai, Maharashtra, India")
      Sheetname.append(adr[1])
      # print(adr[1])
    else:
      address.append("Mumbai, Maharashtra, India")
      Sheetname.append("Mumbai")
# print(Sheetname)
# print(address)
# # print(len(HospitalName))

line=soup.find_all("div",{"class":"card bg-gradient-success"})
for l in line:
  vac=l.find("div",{"class":"h1 m-0"})
  VacantBeds.append(vac.text)
# print(len(VacantBeds))

j=0
content=[]
liner=soup.find_all("table",{"style":"width:100%;border-color:white"})
for li in liner:
  # print(content)
  if(content!=[]):
    icu_vacant.append(content[0])
    with_vacant.append(content[1])
    without_vacant.append(content[2])
    ventilator_vacant.append(content[3])
    # print(icu_vacant)
    # print(with_vacant)
    # print(without_vacant)
    # print(ventilator_vacant)
  content=[]
  ic=li.find_all("tr")
  for ics in ic:
    # print("{loop4}")
    icus=ics.find_all("td")
    if (icus!=[]):
      icu=icus[3]
      # print(icu)
      for i in icu:
        if(j>3):
          content.append(i)
          # print(content)
      j+=1

to=len(HospitalName)-len(icu_vacant)
for z in range(0,to):
    icu_vacant.append("-")
    with_vacant.append("-")
    without_vacant.append("-")
    ventilator_vacant.append("-")

u=len(icu_vacant)
v=len(with_vacant)
w=len(without_vacant)
x=len(ventilator_vacant)
print(u,v,w,x,len(HospitalName),len(VacantBeds),len(contact),len(address))

Mumbai_hospital=pd.DataFrame({"Hospital Name":HospitalName,
                        "Total No. of Vacant Beds":VacantBeds,
                        "No. of Vacant ICU Beds":icu_vacant,
                        "No. of Vacant Oxygen Beds":with_vacant,
                        "No. of Vacant Without-Oxygen Beds":without_vacant,
                        "No. of Vacant Ventilator Beds":ventilator_vacant,
                        # "Last Updated":last_updated,
                        "Contacts":contact,
                        "Address": address,
                        "Check LAST UPDATED":False,
                        "Sheet Name":"Mumbai Hospitals"})

Mumbai_hospital

APIInput = Mumbai_hospital.to_json(orient='records', indent=2)
print(APIInput)
try:
  api_response = requests.post(
        post_api_url, json=json.loads(APIInput), verify=False)
  print(api_response.text)
  if api_response.status_code != 200:
    raise Exception(f"bulkupdate failed: {api_response.text}")
except Exception as err:
  print(err)
finally:
  print("Exiting program!")